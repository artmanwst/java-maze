package backend.academy;

import java.util.List;


/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –∏ –ø—É—Ç–µ–π.
 */
public class Render {
    private static final String YELLOW_CIRCLE_EMOJI = "\uD83D\uDFE1";

    public enum PointType {
        START, END
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç.
     * @param maze –õ–∞–±–∏—Ä–∏–Ω—Ç –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞.
     */
    public String render(Maze maze) {
        StringBuilder stb = new StringBuilder();
        String yellowSquare = "üü®";

        for (int j = 0; j < maze.getWidth() + 2; j++) {
            stb.append(yellowSquare);
        }
        stb.append('\n');

        for (int i = 0; i < maze.getHeight(); i++) {
            stb.append(yellowSquare);

            for (int j = 0; j < maze.getWidth(); j++) {
                Cell cell = maze.getCell(i, j);
                if (cell.getKind() == Cell.Kind.START) {
                    stb.append("\uD83C\uDFC1");  // –§–ª–∞–≥ —Å—Ç–∞—Ä—Ç–∞
                } else if (cell.getKind() == Cell.Kind.PASSAGE) {
                    stb.append('‚¨ú');  // –ü—Ä–æ—Ö–æ–¥
                } else if (cell.getKind() == Cell.Kind.END) {
                    stb.append('E');  // –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞
                } else if (cell.getKind() == Cell.Kind.MONEY) {
                    stb.append("üü°"); // –ú–æ–Ω–µ—Ç–∞ (–∂–µ–ª—Ç—ã–π –∫—Ä—É–≥)
                } else {
                    stb.append('‚¨õ');  // –°—Ç–µ–Ω–∞
                }
            }
            stb.append(yellowSquare);
            stb.append('\n');
        }

        for (int j = 0; j < maze.getWidth() + 2; j++) {
            stb.append(yellowSquare);
        }
        stb.append('\n');

        return stb.toString();
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –∏–ª–∏ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ.
     * @param maze –õ–∞–±–∏—Ä–∏–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ç–æ—á–∫–∞.
     * @param start –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏.
     * @param pointType –¢–∏–ø —Ç–æ—á–∫–∏ (START –∏–ª–∏ END).
     */
    public boolean startMaze(Maze maze, Coordinate start, PointType pointType) {
        Cell cell = maze.getCell(start.row(), start.col());
        if (cell.getKind() == Cell.Kind.PASSAGE || cell.getKind() == Cell.Kind.MONEY) {
            if (pointType == PointType.START) {
                cell.setKind(Cell.Kind.START);
                return true;
            } else {
                cell.setKind(Cell.Kind.END);
                return true;
            }
        }
        return false;
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ø—É—Ç—å –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ.
     * @param maze –õ–∞–±–∏—Ä–∏–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—É—Ç—å.
     * @param path –°–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø—É—Ç—å.
     */
    public String renderPath(Maze maze, List<Coordinate> path) {
        StringBuilder stb = new StringBuilder();
        String yellowSquare = "üü®";
        for (int j = 0; j < maze.getWidth() + 2; j++) {
            stb.append(yellowSquare);
        }
        stb.append('\n');

        for (int i = 0; i < maze.getHeight(); i++) {
            stb.append(yellowSquare);
            for (int j = 0; j < maze.getWidth(); j++) {
                Coordinate now = new Coordinate(i, j);
                if (path.contains(now)) {
                    stb.append("\uD83D\uDFE9");
                } else {
                    Cell cell = maze.getCell(i, j);
                    if (cell.getKind() == Cell.Kind.PASSAGE) {
                        stb.append('‚¨ú');
                    } else if (cell.getKind() == Cell.Kind.MONEY) {
                        stb.append(YELLOW_CIRCLE_EMOJI);
                    } else if (cell.getKind() == Cell.Kind.END) {
                        stb.append('E');
                    } else {
                        stb.append('‚¨õ');
                    }
                }
            }
            stb.append(yellowSquare);
            stb.append('\n');
        }
        for (int j = 0; j < maze.getWidth() + 2; j++) {
            stb.append(yellowSquare);
        }
        stb.append('\n');
        return stb.toString();
    }
}
